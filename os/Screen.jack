// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack
/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean color;

    /** Initializes the Screen. */
    function void init() {
        let color = true;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 511;
        do Screen.setColor(false);
        while (i > - 1) {
            do drawLine(i, 0, i, 255);
            let i = i - 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address;
        var int value;
        var int bit;

        let address = (32 * y) + (x / 16);
        let value = Memory.peek(16384 + address);

        let bit = Math.mod(x, 16);
        if ((Math.bit(value, bit) = 1) = color) {
            return;
        }

        if (color) {
            let value = value + Math.twoTo(bit);
        } else {
            let value = value - Math.twoTo(bit);
        }
        do Memory.poke(16384 + address, value);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {

        var int signX;
        var int signY;
        var int a;
        var int b;
        var int dx;
        var int dy;
        var int address;
        var int value;
        var int bit;

        let a = 0;
        let b = 0;
        let dx = x2 - x1;
        let dy = y2 - y1;
        if (dy = 0) {
            if (x1 > x2) {
                do drawLine(x2, y1, x1, y2);
                return;
            }
            while ((x1 + a) < (x2 + 1)) {
                let address = (32 * y1) + ((x1 + a) / 16);
                let value = Memory.peek(16384 + address);
                let b = (x1 + a) / 16;
                while ( ((x1 + a) < (x2 + 1)) & ( ((x1 + a) / 16) = b)) {
                    let bit = Math.mod(x1 + a, 16);
                    if ((Math.bit(value, bit) = 1) = color) {
                    } else {
                        if (color) {
                            let value = value + Math.twoTo(bit);
                        } else {
                            let value = value - Math.twoTo(bit);
                        }
                    }
                    let a = a + 1;
                }

                do Memory.poke(16384 + address, value);
            }

            return;
        }

        if (dx < 0) {
            let signX = -1;
        } else {
            let signX = 1;
        }
        if (dy < 0) {
            let signY = -1;
        } else {
            let signY = 1;
        }

        // TODO: improve line calculation logic!
        while ( (Math.abs(a) < (Math.abs(dx) + 1)) & (Math.abs(b) < (Math.abs(dy) + 1))) {
            do Screen.drawPixel(x1 + a, y1 + b);

            if (dx = 0) {
                let b = b + (1 * signY);
            } else {
                if (dy = 0) {
                    let a = a + (1 * signX);
                } else {
                    if ( ((Math.abs(b)+1) / (Math.abs(a)+1)) > (Math.abs(dy) / Math.abs(dx)) ) {
                        let a = a + (1 * signX);
                    } else {
                        let b = b + (1 * signY);
                    }
                }
            }
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     *  and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int i;
        if (y1 > y2) {
            do drawRectangle(x1, y2, x2, y1);
            return;
        }

        let i = y1;
        while (i < (y2 + 1)) {
            do drawLine(x1, i, x2, i);
            let i = i + 1;
        }

        return ;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int i;
        var int x1;
        var int x2;
        var int dy;
        var int r2;

        let dy = -r;
        let r2 = r * r;

        while (dy < (r + 1)) {
            let x1 = x - Math.sqrt(r2 - (dy * dy));
            let x2 = x + Math.sqrt(r2 - (dy * dy));
            do drawLine(x1 , y + dy, x2, y + dy);
            let dy = dy + 1;
        }

        return;
    }
}
