// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack
/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int cap;
    field int len;
    field Array content;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let len = 0;
        let cap = maxLength;
        if (maxLength > 0) {
            let content = Array.new(maxLength);
        }

        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (cap > 0) {
            do Memory.deAlloc(content);
        }
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if (j > (len - 1)) {
            return 0;
        }

        return content[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if (j > (len - 1)) {
            return;
        }
        let content[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (len = cap) {
            return this;
        }

        let content[len] = c;
        let len = len + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let len = len - 1;
        return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
        var int sign;
        var int current;
        var int val;
        if (cap = 0) {
            return 0;
        }


        let val = 0;
        // - => 45
        if (content[0] = 45) {
            let sign = -1;
            let current = 1;
        } else {
            let sign = 1;
            let current = 0;
        }

       while (current < length() & charAt(current) >  47 & charAt(current) < 58) {
         let val = (val * 10) + (charAt(current) - 48);
         let current = current + 1;
       }
       return val * sign;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int current;
        var int offset;
        var int num;
        var char c;
        while (length() > 0) {
            do eraseLastChar();
        }

        if (val < 0) {
            do appendChar(45);
            if (val = Math.twoTo(15)) {
                do appendChar(48 + 3);
                do appendChar(48 + 2);
                do appendChar(48 + 7);
                do appendChar(48 + 6);
                do appendChar(48 + 8);
                return;
            }
            let offset = 1;
        } else {
            let offset = 0;
        }

        if (val = 0) {
            do appendChar(48 + 0);
            return;
        }

        let num = Math.abs(val);
        while (num > 0) {
            do appendChar(48 + Math.mod(num, 10));
            let num = num / 10;
        }

        // reverse
        let current = 0;
        while (current < (len - offset) / 2) {
            let c = charAt(current + offset);
            do setCharAt(current + offset, charAt(length() - (current + 1)));
            do setCharAt(length() - (current + 1), c);
            let current = current + 1;
        }

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
